// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  User
  Coach
}

enum UserSex {
  Male
  Female
  Unknown
}

enum UserLevel {
  Beginner
  Middle
  Professional
}

enum TrainingTime {
  Max30
  Max50
  Max80
  Over80
}

enum TrainingStyle {
  Yoga
  Running
  Boxing
  Stretching
  Crossfit
  Aerobics
  Pilates
}

enum GymFeature {
  SwimmingPool
  FreeParking
  ChildrenRoom
  Massage
}

model User {
  id                 Int           @id @default(autoincrement())
  email              String        @unique()
  name               String
  password           String
  role               UserRole      @default(User)
  location           String
  level              UserLevel     @default(Beginner)
  trainingStyle      TrainingStyle @default(Aerobics)
  trainingTime       TrainingTime  @default(Max30)
  caloriesLoss       Int
  caloriesLossPerDay Int
  isReadyForTraining Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())

  @@map("users")
}

model Coach {
  id              Int           @id @default(autoincrement())
  email           String        @unique()
  name            String
  password        String
  role            UserRole      @default(User)
  location        String
  level           UserLevel     @default(Beginner)
  trainingStyle   TrainingStyle @default(Aerobics)
  certificates    String
  merits          String
  isPersonalCoach Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  training        Training[]

  @@map("coaches")
}

model Training {
  id              Int           @id @default(autoincrement())
  title           String
  backgroundImage String
  level           UserLevel
  trainingStyle   TrainingStyle
  trainingTime    TrainingTime
  price           Int           @default(0)
  caloriesLoss    Int
  description     String
  sex             UserSex
  video           String
  rating          Int           @default(0)
  coach           Coach         @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId         Int
  isSpecial       Boolean
  Comment         Comment[]

  @@map("trainings")
}

model Gym {
  id               Int        @id @default(autoincrement())
  title            String
  location         String
  isVerified       Boolean
  gymType          GymFeature
  photo            String[]
  description      String
  price            Int        @default(0)
  constructionDate DateTime

  @@map("gyms")
}

model Comment {
  id         Int      @id @default(autoincrement())
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId Int
  userId     String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("comments")
}
